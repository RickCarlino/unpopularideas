// Generated by CoffeeScript 1.6.3
(function() {
  var Idea, IdeaView, Ideas, IdeasView, UnpopularIdeas, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Idea = (function(_super) {
    __extends(Idea, _super);

    function Idea() {
      _ref = Idea.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Idea.prototype.idAttribute = "_id";

    Idea.prototype.validate = function(attrs, options) {
      if (attrs.title.length < 4) {
        return "Title is too short";
      }
      if (attrs.title.length > 50) {
        return "Title is too long";
      }
    };

    Idea.prototype.urlRoot = "/ideas";

    return Idea;

  })(Backbone.Model);

  IdeaView = (function(_super) {
    __extends(IdeaView, _super);

    function IdeaView() {
      this.updateIdea = __bind(this.updateIdea, this);
      _ref1 = IdeaView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    IdeaView.prototype.tagtitle = "li";

    IdeaView.prototype.initialize = function() {
      _.bindAll(this, "render", "remove");
      this.model.bind("change", this.render);
      this.model.bind("destroy", this.remove);
      return this.template = _.template($("#idea-template").html());
    };

    IdeaView.prototype.events = {
      "click .destroy": "clear",
      "dblclick .title": "edit",
      "keypress .editBox": "updateIdea"
    };

    IdeaView.prototype.clear = function() {
      return this.model.destroy();
    };

    IdeaView.prototype.edit = function() {
      this.$el.find(".title").html(_.template("<input class=\"editBox\" type=\"text\" value=\"<%= title %>\">", this.model.attributes));
      return this.$el.find("input").focus();
    };

    IdeaView.prototype.updateIdea = function(e) {
      var _this = this;
      if (e.keyCode === 13) {
        this.model.set('title', $(".editBox").val());
        this.model.save(null, {
          success: function(model, response) {
            return $(".inputBox").val("");
          },
          error: function(model, response) {
            return console.error('Unable to save your idea. Try again or check your internet connection.');
          }
        });
        if (!this.model.isValid()) {
          return alert(this.model.validationError);
        }
      }
    };

    IdeaView.prototype.render = function() {
      var renderedContent;
      renderedContent = this.template(this.model.toJSON());
      $(this.el).html(renderedContent);
      return this;
    };

    return IdeaView;

  })(Backbone.View);

  Ideas = (function(_super) {
    __extends(Ideas, _super);

    function Ideas() {
      _ref2 = Ideas.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Ideas.prototype.model = Idea;

    Ideas.prototype.url = "/ideas";

    return Ideas;

  })(Backbone.Collection);

  IdeasView = (function(_super) {
    __extends(IdeasView, _super);

    function IdeasView() {
      this.newIdea = __bind(this.newIdea, this);
      _ref3 = IdeasView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    IdeasView.prototype.initialize = function() {
      _.bindAll(this, "render");
      this.template = _.template($("#ideas-template").html());
      this.collection.bind("reset", this.render);
      return this.collection.bind("change", this.render);
    };

    IdeasView.prototype.render = function() {
      var $ideas, collection;
      $ideas = void 0;
      collection = void 0;
      $(this.el).html(this.template);
      $ideas = this.$(".ideas");
      this.collection.each(function(idea) {
        var ideaItem;
        ideaItem = new IdeaView({
          model: idea,
          collection: collection
        });
        return $ideas.append(ideaItem.render().el);
      });
      return this;
    };

    IdeasView.prototype.events = {
      "keypress .inputBox": "newIdea"
    };

    IdeasView.prototype.newIdea = function(e) {
      var newIdea,
        _this = this;
      if (e.keyCode === 13) {
        newIdea = new Idea();
        return newIdea.save({
          title: $(".inputBox").val()
        }, {
          success: function(model, response) {
            $(".inputBox").val("");
            return _this.collection.fetch();
          },
          error: function(model, response) {
            return alert('Whoops!');
          }
        });
      }
    };

    return IdeasView;

  })(Backbone.View);

  UnpopularIdeas = (function(_super) {
    __extends(UnpopularIdeas, _super);

    function UnpopularIdeas() {
      _ref4 = UnpopularIdeas.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    UnpopularIdeas.prototype.routes = {
      "": "home"
    };

    UnpopularIdeas.prototype.initialize = function() {
      var ideas;
      ideas = new Ideas();
      ideas.fetch();
      return this.stream = new IdeasView({
        collection: ideas
      });
    };

    UnpopularIdeas.prototype.home = function() {
      return $("#container").append(this.stream.render().el);
    };

    return UnpopularIdeas;

  })(Backbone.Router);

  $(function() {
    window.App = new UnpopularIdeas();
    return Backbone.history.start();
  });

}).call(this);

/*
//@ sourceMappingURL=app2.map
*/
